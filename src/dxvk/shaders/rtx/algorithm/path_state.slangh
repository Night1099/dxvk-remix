/*
* Copyright (c) 2023-2024, NVIDIA CORPORATION. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
#pragma once

#include "rtx/concept/ray_portal/ray_portal.slangh"
#include "rtx/utility/packing.slangh"
#include "rtx/algorithm/resolve_expanded.slangh"

// RNG state is not carried via PathState from RayGen to Hit shader, 
// but instead it is reconstructed using following explicit constants.
// Hit shaders reuse the RNG state within its scope
// Direction sample takes 3 samples - 1 for a lobe selection and 2 for a 2D uv sample
static const uint kRNGOffsetSampleFirstBounceDirection = 0;
// Russian roulette on first bounce takes the sampleOffset 3 (carried over as live RNG state)
// RNG state is not carried between Raygen and closest hit shaders (CHS), so RNG state is recreated
// at CHS start with a following explicit offset
static const uint kRNGOffsetSampleClosestHitShader = 4;

// Approximate number of rng samples per bounce
static const uint kApproxRNGSamplesPerBounce = 16;

#define NEE_CACHE_STATE_DISABLED 0
#define NEE_CACHE_STATE_LAST_ENABLED 1
#define NEE_CACHE_STATE_ENABLED 2

// Path state to be passed to functions (or the CHS) handling a path vertex.
struct PathState : IBasePayloadState
{
  // Note: These ray properties are passed into the function with the state of the
  // ray being cast as an input, and then set to the new state of the sampled ray
  // (if applicable) as an output.
  vec3 _origin;
  float accumulatedHitDistance; // unused (1b - sign bit)

  // Note: Radiance, throughput and hit distances are passed in and then written back out
  // so they can be accumulated into in the path tracing loop.
  vec3 radiance;
  float _segmentHitDistance;

  f16vec3 throughput;
  float16_t firstBounceHitDistance;  // Note: The total hit distance of the resolve for the first bounce.
  uint16_t neeCacheCellOffset;
  uint16_t mediumMaterialIndex;
  float16_t coneSpreadAngle; // unused (1b - sign bit)
  float16_t _coneRadius; // unused (1b - sign bit)
  
  f16vec3 _direction;
  float16_t solidAnglePdf; // unused (1b - sign bit)
  uint8_t _flags; // continueResolving(bool:1b) 
                  // continuePath(bool:1b) 
                  // insideMedium(bool:1b) 
                  // decalEncountered(bool:1b) 
                  // restirGiHasHitGeometry(bool:1b)
                  // restirGiHasHitOpaque(bool:1b)
                  // enableNeeCacheAfterFirstBounce(bool:1b) 
                  // restirGiHasFoundRoughSurface(bool:1b) 
  uint8_t _rayMask;
  uint8_t _data; // PortalSpace(uint:2b), 
                 // indirectLightPortalID(uint:2b), 
                 // bounceIteration(uint:4b)
  uint8_t _roughness;
  
  // Property to get and set pixel coordinate
  property u16vec2 pixelCoordinate 
  {
    get 
    {
    #ifdef RAY_PIPELINE
      return DispatchRaysIndex().xy;
    #else
      return gl_GlobalInvocationID.xy;
    #endif
  }
    set { /* Not applicable in this context */ }
  }

  // Passthrough accessors
  property float3 origin 
  {
    get { return _origin; }
    set { _origin = newValue; }
  }

  property float16_t coneRadius 
  {
    get { return _coneRadius; }
    set { _coneRadius = newValue; }
  }

  property float segmentHitDistance 
  {
    get { return _segmentHitDistance; }
    set { _segmentHitDistance = newValue; }
  }

  property uint8_t rayMask 
  {
    get { return _rayMask; }
    set { _rayMask = newValue; }
  }

  // Flags
  // Note: Needed output for Resolve function. Indicates that more resolve work needs to happen
  // and hits should not be counted until finished. Could be omitted from input memory payload
  // if extra flag space is needed, but kept there for now for simplicity.
  property bool continueResolving
  {
      get { return packedFlagGet(_flags, 1 << 0); }
      set { _flags = packedFlagAssign(_flags, 1 << 0, newValue); }
  }

  // Note: Used as an input and output to indicate when the path should finish. Set to true either
  // when the max bounce count is hit or when terminated due to a russian roulette style heuristic.
  property bool continuePath
  {
      get { return packedFlagGet(_flags, 1 << 1); }
      set { _flags = packedFlagAssign(_flags, 1 << 1, newValue); }
  }

  // Note: Used to keep track of if a ray is inside a translucent medium or not, used as both an
  // input and an output to keep a persistent state across calls.
  property bool insideMedium
  {
      get { return packedFlagGet(_flags, 1 << 2); }
      set { _flags = packedFlagAssign(_flags, 1 << 2, newValue); }
  }

  property bool decalEncountered
  {
      get { return packedFlagGet(_flags, 1 << 3); }
      set { _flags = packedFlagAssign(_flags, 1 << 3, newValue); }
  }

  property bool restirGiHasHitGeometry
  {
      get { return packedFlagGet(_flags, 1 << 4); }
      set { _flags = packedFlagAssign(_flags, 1 << 4, newValue); }
  }

  property bool restirGiHasHitOpaque
  {
      get { return packedFlagGet(_flags, 1 << 5); }
      set { _flags = packedFlagAssign(_flags, 1 << 5, newValue); }
  }

  property bool enableNeeCacheAfterFirstBounce
  {
      get { return packedFlagGet(_flags, 1 << 6); }
      set { _flags = packedFlagAssign(_flags, 1 << 6, newValue); }
  }

  property bool restirGiHasFoundRoughSurface
  {
      get { return packedFlagGet(_flags, 1 << 7); }
      set { _flags = packedFlagAssign(_flags, 1 << 7, newValue); }
  }

  property bool directionAltered
  {
      get { return false; }
      set { }
  }

  // Packed members

  property f16vec3 direction
  {
      get { return _direction; }
      set { _direction = newValue; }
  }

  // Track the portal ID that an indirect ray crosses
  property PortalSpace2BitsType portalSpace
  {
      get { return (PortalSpace2BitsType)(_data & 0b11); }
      set { _data = (_data & (~0b11)) | ((uint)newValue); }
  }

  property uint8_t indirectLightPortalID
  {
      get { return (uint8_t)((_data >> 2) & 0b11); }
      set { _data = (_data & (~(0b11 << 2))) | ((newValue & 0b11) << 2); }
  }

  property uint8_t bounceIteration
  {
      get { return (_data >> 4) & 0xf; }
      set { _data = (_data & (~(0xf << 4))) | ((newValue & 0xf) << 4); }
  }

  property f16vec4 accumulatedRotation
  {
      get { return getIdentityQuaternion(); }
      set { }
  }

  property float16_t gbufferPerceptualRoughness
  {
      get { return unorm8ToF16(_roughness); }
      set { _roughness = f16ToUnorm8(newValue); }
  }

  // Calculates an RNG offset at a start of a bounce set in the path state
  uint calculateRNGOffset(uint sampleOffset) 
  {
    return bounceIteration * kApproxRNGSamplesPerBounce + sampleOffset;
  }

  static uint calculateRNGOffsetOnFirstBounce(uint sampleOffset) 
  {
    return sampleOffset;
  } 

  // Note: Using separate accumulation for particles and whatever else as while they should be visible in reflections
  // through indirect paths, they do not need to be evaluated with particularly high quality. This is only done for the
  // first bounce as past that all particles and similar things will be skipped anyways.
  bool getSeparateUnorderedApproximationsActive()
  {
    RNG rng = createRNG(pixelCoordinate, cb.frameIdx, 101);
    return cb.enableSeparateUnorderedApproximations &&
           cb.enableUnorderedResolveInIndirectRays &&
           bounceIteration <= 1 && 
           (!cb.enableProbabilisticUnorderedResolveInIndirectRays || getNextSampleBlueNoise(rng) <= getUnorderedApproximationSelectionProbability());
  }

  // Describe the rate at which we should perform unordered resolve for indirect rays.
  static const float16_t kUnorderedResolveSelectionProbabilityMin = 1.h/16.h;
  static const float16_t kUnorderedResolveSelectionProbabilityMax = 1.h/2.h;

  float16_t getUnorderedApproximationSelectionProbability()
  {
    return cb.enableProbabilisticUnorderedResolveInIndirectRays
             // Note: The use of gbuffer roughness here is just a rough estimator for how important a ray is to the overall path contribution. 
             //       There are better estimators, however this one is basically free, and provides good quality.  Ideally we want high probability
             //       when the ray is from a smooth material, and low probability when it is very rough.
             ? lerp(kUnorderedResolveSelectionProbabilityMax, kUnorderedResolveSelectionProbabilityMin, gbufferPerceptualRoughness)
             : 1.h;
  }

#if defined(RAY_PIPELINE) && defined(RT_SHADER_EXECUTION_REORDERING)
  bool shouldReorder(out uint coherenceHints, out uint numCoherenceHints)
  {
    coherenceHints = 0;
    numCoherenceHints = 0;

    if (cb.enableSeparateUnorderedApproximations &&
        cb.enableUnorderedResolveInIndirectRays) 
    {
      addCoherenceHintAsLeastImportant1Bit(getSeparateUnorderedApproximationsActive(), coherenceHints, numCoherenceHints);
    }
    return true;
  }

#else
  bool shouldReorder(out uint coherenceHints, out uint numCoherenceHints)
  {
    coherenceHints = 0;
    numCoherenceHints = 0;
    return false;
  }
#endif
}

struct DirectPathTextures
{
  RWTexture2D<uint> SharedFlags;
  RWTexture2D<uint> SharedMediumMaterialIndex;
  RWTexture2D<float4> PrimaryDirectDiffuseLobeRadianceHitDistance;
  RWTexture2D<float4> PrimaryDirectSpecularLobeRadianceHitDistance;
  RWTexture2D<float4> SecondaryCombinedDiffuseLobeRadianceHitDistance;
  RWTexture2D<float4> SecondaryCombinedSpecularLobeRadianceHitDistance;
  RWTexture2D<float4> IndirectRayOriginDirection;
  RWTexture2D<float4> IndirectThroughputConeRadius;
  RWTexture2D<float> IndirectFirstHitPerceptualRoughness;
  RWTexture2D<float> PrimaryRtxdiIlluminance;
};

struct IndirectPathTextures
{
  Texture2D<float4> PrimaryWorldPositionWorldTriangleNormal;
  RWTexture2D<float4> IndirectRadianceHitDistance;
  REORDER_COHERENT RWTexture2D<float4> RestirGIRadiance;
  RWTexture2D<float4> RestirGIHitGeometry; 
};
