/*
* Copyright (c) 2023, NVIDIA CORPORATION. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
#pragma once

// Ray Portal Surface Material Functions

RayPortalSurfaceMaterial rayPortalSurfaceMaterialCreate(uint16_t surfaceMaterialIndex, MemoryPolymorphicSurfaceMaterial memoryPolymorphicSurfaceMaterial)
{
  // Decode the Ray Portal Surface Material from the packed memory representation
  // Note: Ray Portal type is known in advance
  RayPortalSurfaceMaterial rayPortalSurfaceMaterial;

  const u16vec2 data00 = unpack16(memoryPolymorphicSurfaceMaterial.data0.x);
  const u16vec2 data01 = unpack16(memoryPolymorphicSurfaceMaterial.data0.y);
  const u16vec2 data02 = unpack16(memoryPolymorphicSurfaceMaterial.data0.z);
  const u16vec2 data03 = unpack16(memoryPolymorphicSurfaceMaterial.data0.w);

  rayPortalSurfaceMaterial.rayPortalIndex = uint8_t(data00.x >> 8);

  rayPortalSurfaceMaterial.maskTextureIndex = data00.y;
  rayPortalSurfaceMaterial.maskTextureIndex2 = data01.x;

  rayPortalSurfaceMaterial.rotationSpeed = uint16BitsToHalf(data01.y);
  rayPortalSurfaceMaterial.emissiveIntensity = uint16BitsToHalf(data02.x);
  rayPortalSurfaceMaterial.samplerIndex = data02.y;
  rayPortalSurfaceMaterial.samplerIndex2 = data03.x;

  return rayPortalSurfaceMaterial;
}
