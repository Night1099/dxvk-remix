/*
* Copyright (c) 2023, NVIDIA CORPORATION. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
#pragma once

// Ray Constants

// Note: Sign bit of hit distance on Ray Interactions used to indicate no hit.
static const float kMissHitDistance = -1.0f;

// Pixels with 0 hit distance will have their Hit T values reconstructed by NRD. Radiance is passed as-is however and must
// typically be set to 0 for "empty" pixels assuming the PDF of the stochastic choice between having the pixel be empty or not was
// factored into the radiance present in other pixels.
static const float kEmptyPixelHitDistance = 0.f;

// Ray Helper Structures

struct RayHitInfo
{
  float hitDistance;
  uint barycentricCoordinates;
  uint primitiveIndex;
  uint customIndex;
  uint geometryIndex;
  bool hasHit;
  bool frontHit;
};

uint calculateSurfaceIndex(RayHitInfo rayHitInfo) 
{
  return (rayHitInfo.customIndex & CUSTOM_INDEX_SURFACE_MASK) + rayHitInfo.geometryIndex;    
}

uint calculateMaterialType(RayHitInfo rayHitInfo) 
{
  return (rayHitInfo.customIndex >> CUSTOM_INDEX_MATERIAL_TYPE_BIT) & surfaceMaterialTypeMask;    
}

#define RAY_HIT_INFO_CREATE_TRACE_RAY_HIT(variableName)                           \
RayHitInfo variableName;                                                          \
variableName.hitDistance = RayTCurrent();                                         \
variableName.barycentricCoordinates = barycentricsToUint(barycentricCoordinates); \
variableName.primitiveIndex = PrimitiveIndex();                                   \
variableName.customIndex = InstanceID();                                          \
variableName.geometryIndex = GeometryIndex();                                     \
variableName.hasHit = true;                                                       \
variableName.frontHit = HitKind() == HIT_KIND_TRIANGLE_FRONT_FACE;

#define RAY_HIT_INFO_CREATE_TRACE_RAY_MISS(variableName) \
RayHitInfo variableName;                                 \
variableName.hasHit = false;

#define RAY_HIT_INFO_CREATE_RAY_QUERY_CANDIDATE(variableName, rayQuery)                             \
variableName.hasHit = true;                                                                         \
variableName.hitDistance = rayQuery.CandidateTriangleRayT();                                        \
variableName.barycentricCoordinates = barycentricsToUint(rayQuery.CandidateTriangleBarycentrics()); \
variableName.primitiveIndex = rayQuery.CandidatePrimitiveIndex();                                   \
variableName.customIndex = rayQuery.CandidateInstanceID();                                          \
variableName.geometryIndex = rayQuery.CandidateGeometryIndex();                                     \
variableName.frontHit = rayQuery.CandidateTriangleFrontFace();

#define RAY_HIT_INFO_CREATE_RAY_QUERY_COMMITTED(variableName, rayQuery)                             \
RayHitInfo variableName;                                                                            \
variableName.hasHit = rayQuery.CommittedStatus() == COMMITTED_TRIANGLE_HIT;                         \
variableName.hitDistance = rayQuery.CommittedRayT();                                                \
variableName.barycentricCoordinates = barycentricsToUint(rayQuery.CommittedTriangleBarycentrics()); \
variableName.primitiveIndex = rayQuery.CommittedPrimitiveIndex();                                   \
variableName.customIndex = rayQuery.CommittedInstanceID();                                          \
variableName.geometryIndex = rayQuery.CommittedGeometryIndex();                                     \
variableName.frontHit = rayQuery.CommittedTriangleFrontFace();
