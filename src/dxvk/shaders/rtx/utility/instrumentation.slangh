/*
* Copyright (c) 2022-2024, NVIDIA CORPORATION. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
#pragma once

// Uncomment to enable
// #define ENABLE_INSTRUMENTATION

#if defined(ENABLE_INSTRUMENTATION) && 
    // Currently supported paths
    defined(RAY_PIPELINE) && defined(INTEGRATE_INDIRECT)

// Tracks if all lanes called this function if the input id matches that of cb.DebugKnob.x
// and sets UAV to 1 if not. If all lanes are seen, it stores nothing.
// See Thread Divergence(bit = Debug Knob.x) in DebugView for the output in a frame
void instrumentThreadDivergence(uint uniqueShaderLocationID, uint maxActiveLanes)
{  
  if (uniqueShaderLocationID != uint(cb.debugKnob.x))
  {
    return;
  }

  bool isDivergent = WaveActiveSum(1) != maxActiveLanes;

  if (isDivergent)
  {
    Instrumentation[DispatchRaysIndex().xy] = 1;
  }
}
 
// Note: same referenceMaxActiveLanesID can be used among multiple INSTRUMENT_THREAD_DIVERGENCE
// if they all expect same max active lane count from previously issued INSTRUMENT_REFERENCE_ACTIVE_LANES 
#define INSTRUMENT_THREAD_DIVERGENCE(uniqueShaderLocationID, referenceMaxActiveLanesID) \
  instrumentThreadDivergence(uniqueShaderLocationID, numActiveLanes ## referenceMaxActiveLanesID)

// referenceMaxActiveLanesID must be unique within the scope
#define INSTRUMENT_REFERENCE_ACTIVE_LANES(referenceMaxActiveLanesID) \
  const uint numActiveLanes ## referenceMaxActiveLanesID = WaveActiveSum(1)
#else

#define INSTRUMENT_THREAD_DIVERGENCE(uniqueShaderLocationID, referenceMaxActiveLanesID)
#define INSTRUMENT_REFERENCE_ACTIVE_LANES(referenceMaxActiveLanesID)
#endif
