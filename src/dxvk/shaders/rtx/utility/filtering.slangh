/*
* Copyright (c) 2024, NVIDIA CORPORATION. All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a
* copy of this software and associated documentation files (the "Software"),
* to deal in the Software without restriction, including without limitation
* the rights to use, copy, modify, merge, publish, distribute, sublicense,
* and/or sell copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
* DEALINGS IN THE SOFTWARE.
*/
#pragma once

// Retrieves a median from 9 input values
// Note:
//  - Entries are sorted by .w component
//  - Invalid values to be disregarded (first) must have their .w compoent set to -c_floatMax
//  - On even valid values, picks one value as a median (not an average of two)
float4 getMedian(float4 v[9])
{
  // Ref: https://casual-effects.com/research/McGuire2008Median/median.pix
  #define s2(a, b)                temp = a; a = a.w < b.w ? a : b; b = temp.w >= b.w ? temp : b;
  #define mn3(a, b, c)            s2(a, b); s2(a, c);
  #define mx3(a, b, c)            s2(b, c); s2(a, c);

  #define mnmx3(a, b, c)          mx3(a, b, c); s2(a, b);                                   // 3 exchanges
  #define mnmx4(a, b, c, d)       s2(a, b); s2(c, d); s2(a, c); s2(b, d);                   // 4 exchanges
  #define mnmx5(a, b, c, d, e)    s2(a, b); s2(c, d); mn3(a, c, e); mx3(b, d, e);           // 6 exchanges
  #define mnmx6(a, b, c, d, e, f) s2(a, d); s2(b, e); s2(c, f); mn3(a, b, c); mx3(d, e, f); // 7 exchanges

  // Starting with a subset of size 6, remove the min and max each time
  // Discard invalid values first by preserving a potentially valid max value,
  // if the second minimum value is invalid after each min/max swap iteration.
  float4 temp;
  const float kMinInvalidValue = -1;
  mnmx6(v[0], v[1], v[2], v[3], v[4], v[5]);
  if (v[1].w == kMinInvalidValue)
  {
    v[1] = v[5];
  }

  mnmx5(v[1], v[2], v[3], v[4], v[6]);
  if (v[2].w == kMinInvalidValue)
  {
    v[2] = v[6];
  }

  mnmx4(v[2], v[3], v[4], v[7]);
  if (v[3].w == kMinInvalidValue)
  {
    v[3] = v[7];
  }

  mnmx3(v[3], v[4], v[8]);
  if (v[4].w == kMinInvalidValue)
  {
    v[4] = v[8];
  }
  
  return v[4];
}

float3 median3x3(RWTexture2D<float4> tex, int2 center)
{
  float4 v[9];

  // Add the pixels which make up our window to the pixel array.
  for (int dX = -1; dX <= 1; ++dX)
  {
    for (int dY = -1; dY <= 1; ++dY)
    {
      int2 offset = int2(dX, dY);
      // If a pixel in the window is located at (x+dX, y+dY), put it at index (dX + R)(2R + 1) + (dY + R) of the
      // pixel array. This will fill the pixel array, with the top left pixel of the window at pixel[0] and the
      // bottom right pixel of the window at pixel[N-1].
      v[(dX + 1) * 3 + (dY + 1)].xyz = tex[offset + center].xyz;
      v[(dX + 1) * 3 + (dY + 1)].w = calcBt709Luminance(v[(dX + 1) * 3 + (dY + 1)].xyz);
    }
  }

  return getMedian(v).xyz;
}
